# Generated by Django 4.2.7 on 2024-01-01 00:00

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.core.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('role_management', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='MenuGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('group_type', models.CharField(choices=[('main', 'Main Navigation'), ('admin', 'Admin Panel'), ('student', 'Student Dashboard'), ('instructor', 'Instructor Panel'), ('mobile', 'Mobile Navigation')], default='main', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('sort_order', models.IntegerField(default=0)),
                ('min_role_level', models.IntegerField(default=10, help_text='Minimum role level required to see this menu group (10=Student, 100=Super Admin)', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_menu_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Menu Group',
                'verbose_name_plural': 'Menu Groups',
                'db_table': 'navigation_menu_groups',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MenuConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, unique=True)),
                ('config_type', models.CharField(choices=[('theme', 'Theme Configuration'), ('behavior', 'Behavior Settings'), ('cache', 'Cache Settings'), ('api', 'API Configuration'), ('features', 'Feature Flags'), ('analytics', 'Analytics Settings')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('value', models.TextField(help_text='Configuration value in JSON format or plain text')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Menu Configuration',
                'verbose_name_plural': 'Menu Configurations',
                'db_table': 'navigation_menu_configuration',
                'ordering': ['config_type', 'key'],
            },
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=200)),
                ('icon', models.CharField(blank=True, help_text="Icon identifier or class (e.g., 'home', 'user')", max_length=50)),
                ('target_type', models.CharField(choices=[('internal', 'Internal Link'), ('external', 'External Link'), ('api_endpoint', 'API Endpoint')], default='internal', max_length=20)),
                ('url_name', models.CharField(blank=True, help_text='Django URL name for internal links', max_length=100)),
                ('url_path', models.CharField(blank=True, help_text='Direct URL path or external URL', max_length=200)),
                ('url_params', models.JSONField(blank=True, default=dict, help_text='URL parameters as JSON object')),
                ('opens_in_new_window', models.BooleanField(default=False, help_text='Open link in new window/tab')),
                ('is_active', models.BooleanField(default=True)),
                ('sort_order', models.IntegerField(default=0)),
                ('css_classes', models.CharField(blank=True, help_text='Additional CSS classes for styling', max_length=200)),
                ('badge_text', models.CharField(blank=True, help_text="Badge text to display (e.g., 'New', 'Beta')", max_length=20)),
                ('badge_color', models.CharField(blank=True, help_text="Badge color (e.g., 'primary', 'success', 'warning')", max_length=20)),
                ('min_role_level', models.IntegerField(default=10, help_text='Minimum role level required to see this menu item', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(100)])),
                ('requires_authentication', models.BooleanField(default=True)),
                ('hide_for_authenticated', models.BooleanField(default=False, help_text='Hide this item for authenticated users (useful for login/register links)')),
                ('show_only_if_has_permission', models.CharField(blank=True, help_text="Django permission codename (e.g., 'courses.add_course')", max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_menu_items', to=settings.AUTH_USER_MODEL)),
                ('menu_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='navigation.menugroup')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='navigation.menuitem')),
            ],
            options={
                'verbose_name': 'Menu Item',
                'verbose_name_plural': 'Menu Items',
                'db_table': 'navigation_menu_items',
                'ordering': ['menu_group', 'sort_order', 'title'],
                'unique_together': {('menu_group', 'title', 'parent')},
            },
        ),
        migrations.CreateModel(
            name='MenuClickTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clicked_at', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('api_endpoint', models.CharField(blank=True, help_text='API endpoint that was accessed', max_length=200)),
                ('referrer', models.CharField(blank=True, help_text='HTTP Referer header', max_length=200)),
                ('session_key', models.CharField(blank=True, max_length=40)),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='click_tracking', to='navigation.menuitem')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='menu_clicks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Menu Click Tracking',
                'verbose_name_plural': 'Menu Click Tracking',
                'db_table': 'navigation_menu_click_tracking',
                'ordering': ['-clicked_at'],
            },
        ),
        migrations.CreateModel(
            name='MenuItemPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('can_view', models.BooleanField(default=True)),
                ('can_access', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permissions', to='navigation.menuitem')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='menu_permissions', to='role_management.roledefinition')),
            ],
            options={
                'verbose_name': 'Menu Item Permission',
                'verbose_name_plural': 'Menu Item Permissions',
                'db_table': 'navigation_menu_item_permissions',
                'unique_together': {('menu_item', 'role')},
            },
        ),
        migrations.AddIndex(
            model_name='menuclicktracking',
            index=models.Index(fields=['menu_item', 'clicked_at'], name='navigation_menu_item_clicked_at_idx'),
        ),
        migrations.AddIndex(
            model_name='menuclicktracking',
            index=models.Index(fields=['user', 'clicked_at'], name='navigation_user_clicked_at_idx'),
        ),
        migrations.AddIndex(
            model_name='menuclicktracking',
            index=models.Index(fields=['clicked_at'], name='navigation_clicked_at_idx'),
        ),
    ]