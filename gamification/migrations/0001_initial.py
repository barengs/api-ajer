# Generated by Django 5.2.5 on 2025-08-26 14:13

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('assignments', '0001_initial'),
        ('courses', '0001_initial'),
        ('lessons', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BadgeType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('icon', models.ImageField(blank=True, null=True, upload_to='badges/icons/')),
                ('category', models.CharField(choices=[('learning', 'Learning'), ('social', 'Social'), ('achievement', 'Achievement'), ('instructor', 'Instructor'), ('special', 'Special')], max_length=20)),
                ('points_required', models.IntegerField(default=0, help_text='Points required to earn this badge')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('leaderboard_type', models.CharField(choices=[('overall_points', 'Overall Points'), ('monthly_points', 'Monthly Points'), ('course_completion', 'Course Completion'), ('forum_activity', 'Forum Activity'), ('streak', 'Login Streak')], max_length=20, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('reset_frequency', models.CharField(choices=[('never', 'Never'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly')], default='never', max_length=20)),
                ('last_reset', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(unique=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('name', models.CharField(max_length=50)),
                ('min_points', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('max_points', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('icon', models.ImageField(blank=True, null=True, upload_to='levels/icons/')),
                ('perks', models.JSONField(blank=True, default=list, help_text='List of perks for this level')),
            ],
            options={
                'ordering': ['level'],
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('icon', models.ImageField(blank=True, null=True, upload_to='achievements/icons/')),
                ('achievement_type', models.CharField(choices=[('milestone', 'Milestone'), ('speed', 'Speed'), ('consistency', 'Consistency'), ('excellence', 'Excellence'), ('social', 'Social'), ('special', 'Special')], max_length=20)),
                ('requirements', models.JSONField(help_text='JSON object defining achievement requirements')),
                ('points_reward', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_hidden', models.BooleanField(default=False, help_text='Hidden until unlocked')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('badge_reward', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gamification.badgetype')),
            ],
            options={
                'ordering': ['achievement_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_points', models.IntegerField(default=0)),
                ('courses_completed', models.IntegerField(default=0)),
                ('lessons_completed', models.IntegerField(default=0)),
                ('assignments_submitted', models.IntegerField(default=0)),
                ('quizzes_passed', models.IntegerField(default=0)),
                ('forum_posts', models.IntegerField(default=0)),
                ('forum_replies', models.IntegerField(default=0)),
                ('helpful_replies', models.IntegerField(default=0)),
                ('current_login_streak', models.IntegerField(default=0)),
                ('longest_login_streak', models.IntegerField(default=0)),
                ('last_login_date', models.DateField(blank=True, null=True)),
                ('perfect_scores', models.IntegerField(default=0)),
                ('certificates_earned', models.IntegerField(default=0)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('current_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='gamification.userlevel')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LeaderboardEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField()),
                ('score', models.IntegerField()),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('leaderboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='gamification.leaderboard')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['leaderboard', 'rank'],
                'indexes': [models.Index(fields=['leaderboard', 'rank'], name='gamificatio_leaderb_b02db0_idx'), models.Index(fields=['user'], name='gamificatio_user_id_fd23b8_idx')],
                'unique_together': {('leaderboard', 'user')},
            },
        ),
        migrations.CreateModel(
            name='PointsTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(help_text='Positive for earning, negative for deduction')),
                ('transaction_type', models.CharField(choices=[('lesson_complete', 'Lesson Completed'), ('assignment_submit', 'Assignment Submitted'), ('quiz_pass', 'Quiz Passed'), ('forum_post', 'Forum Post'), ('forum_reply', 'Forum Reply'), ('helpful_reply', 'Helpful Reply'), ('course_complete', 'Course Completed'), ('perfect_score', 'Perfect Score'), ('first_course', 'First Course'), ('daily_login', 'Daily Login'), ('streak_bonus', 'Streak Bonus'), ('referral', 'Referral Bonus'), ('bonus', 'Bonus Points'), ('penalty', 'Points Deducted')], max_length=20)),
                ('description', models.CharField(max_length=200)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('assignment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='assignments.assignment')),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.course')),
                ('lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lessons.lesson')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='gamificatio_user_id_9393e2_idx'), models.Index(fields=['transaction_type'], name='gamificatio_transac_9dad6f_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('progress_data', models.JSONField(blank=True, default=dict)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-earned_at'],
                'unique_together': {('user', 'achievement')},
            },
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional data about how badge was earned')),
                ('badge_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamification.badgetype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-earned_at'],
                'unique_together': {('user', 'badge_type')},
            },
        ),
    ]
