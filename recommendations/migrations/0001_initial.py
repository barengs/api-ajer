# Generated by Django 5.2.5 on 2025-08-26 14:15

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('courses', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='RecommendationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_algorithm', models.CharField(choices=[('collaborative', 'Collaborative Filtering'), ('content', 'Content-Based Filtering'), ('hybrid', 'Hybrid Approach'), ('popularity', 'Popularity-Based'), ('knowledge', 'Knowledge-Based')], default='hybrid', max_length=20)),
                ('max_recommendations_per_user', models.PositiveIntegerField(default=10, help_text='Maximum number of recommendations to generate per user')),
                ('recommendation_expiry_days', models.PositiveIntegerField(default=7, help_text='Number of days after which recommendations expire')),
                ('auto_refresh_enabled', models.BooleanField(default=True, help_text='Whether to automatically refresh recommendations')),
                ('refresh_interval_hours', models.PositiveIntegerField(default=24, help_text='Hours between automatic recommendation refreshes')),
                ('exclude_completed_courses', models.BooleanField(default=True, help_text='Exclude courses the user has already completed')),
                ('exclude_enrolled_courses', models.BooleanField(default=True, help_text='Exclude courses the user is already enrolled in')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'recommendation_settings',
                'verbose_name': 'Recommendation Settings',
                'verbose_name_plural': 'Recommendation Settings',
            },
        ),
        migrations.CreateModel(
            name='UserRecommendationProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferred_categories', models.JSONField(default=list, help_text='List of category IDs the user prefers')),
                ('preferred_difficulty_levels', models.JSONField(default=list, help_text='List of preferred difficulty levels (beginner, intermediate, advanced)')),
                ('preferred_learning_styles', models.JSONField(default=list, help_text='List of preferred learning styles (video, text, interactive, etc.)')),
                ('last_active', models.DateTimeField(default=django.utils.timezone.now)),
                ('total_learning_time', models.PositiveIntegerField(default=0, help_text='Total time spent learning in minutes')),
                ('feature_vector', models.JSONField(default=dict, help_text='User feature vector for machine learning algorithms')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_courses', models.ManyToManyField(blank=True, related_name='completed_by_users', to='courses.course')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_profile', to=settings.AUTH_USER_MODEL)),
                ('viewed_courses', models.ManyToManyField(blank=True, related_name='viewed_by_users', to='courses.course')),
            ],
            options={
                'db_table': 'user_recommendation_profiles',
                'verbose_name': 'User Recommendation Profile',
                'verbose_name_plural': 'User Recommendation Profiles',
            },
        ),
        migrations.CreateModel(
            name='UserCourseInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('viewed', 'Viewed'), ('enrolled', 'Enrolled'), ('completed', 'Completed'), ('rated', 'Rated'), ('wishlisted', 'Wishlisted'), ('searched', 'Searched')], max_length=20)),
                ('rating', models.PositiveSmallIntegerField(blank=True, help_text='Rating given by user (1-5)', null=True)),
                ('time_spent', models.PositiveIntegerField(default=0, help_text='Time spent on course in minutes')),
                ('interaction_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional context about the interaction')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_course_interactions',
                'verbose_name': 'User Course Interaction',
                'verbose_name_plural': 'User Course Interactions',
            },
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_type', models.CharField(choices=[('course', 'Course Recommendation'), ('lesson', 'Lesson Recommendation'), ('instructor', 'Instructor Recommendation'), ('category', 'Category Recommendation'), ('similar_user', 'Similar User Recommendation')], max_length=20)),
                ('recommended_item_id', models.PositiveIntegerField(blank=True, help_text='ID of recommended item (for non-course recommendations)', null=True)),
                ('algorithm_used', models.CharField(choices=[('collaborative', 'Collaborative Filtering'), ('content', 'Content-Based Filtering'), ('hybrid', 'Hybrid Approach'), ('popularity', 'Popularity-Based'), ('knowledge', 'Knowledge-Based')], max_length=20)),
                ('score', models.FloatField(help_text='Recommendation score/confidence level (0.0 - 1.0)')),
                ('reason', models.TextField(blank=True, help_text='Explanation of why this recommendation was made')),
                ('reason_data', models.JSONField(blank=True, default=dict, help_text='Structured data explaining the recommendation')),
                ('generated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this recommendation expires', null=True)),
                ('is_clicked', models.BooleanField(default=False)),
                ('clicked_at', models.DateTimeField(blank=True, null=True)),
                ('is_dismissed', models.BooleanField(default=False)),
                ('dismissed_at', models.DateTimeField(blank=True, null=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recommended_to', to='courses.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'recommendations',
                'verbose_name': 'Recommendation',
                'verbose_name_plural': 'Recommendations',
                'ordering': ['-generated_at'],
            },
        ),
        migrations.CreateModel(
            name='RecommendationFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_type', models.CharField(choices=[('helpful', 'Helpful'), ('not_helpful', 'Not Helpful'), ('irrelevant', 'Irrelevant'), ('misleading', 'Misleading')], max_length=20)),
                ('comment', models.TextField(blank=True, help_text="User's comment on the recommendation")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recommendation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='recommendations.recommendation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'recommendation_feedback',
                'verbose_name': 'Recommendation Feedback',
                'verbose_name_plural': 'Recommendation Feedback',
            },
        ),
        migrations.AddIndex(
            model_name='userrecommendationprofile',
            index=models.Index(fields=['last_active'], name='user_recomm_last_ac_0d5f6c_idx'),
        ),
        migrations.AddIndex(
            model_name='userrecommendationprofile',
            index=models.Index(fields=['total_learning_time'], name='user_recomm_total_l_5e8f7a_idx'),
        ),
        migrations.AddIndex(
            model_name='usercourseinteraction',
            index=models.Index(fields=['user', 'interaction_type'], name='user_cours_user_id_8a2b4c_idx'),
        ),
        migrations.AddIndex(
            model_name='usercourseinteraction',
            index=models.Index(fields=['course', 'interaction_type'], name='user_cours_course__2b3c4d_idx'),
        ),
        migrations.AddIndex(
            model_name='usercourseinteraction',
            index=models.Index(fields=['interaction_date'], name='user_cours_interac_3c4d5e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usercourseinteraction',
            unique_together={('user', 'course', 'interaction_type')},
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['user', 'generated_at'], name='recommendat_user_id_4d5e6f_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['user', 'recommendation_type'], name='recommendat_user_id_5e6f7g_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['generated_at'], name='recommendat_generat_6f7g8h_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['score'], name='recommendat_score_7g8h9i_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendationfeedback',
            index=models.Index(fields=['recommendation', 'feedback_type'], name='recommendat_recomme_8h9i0j_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendationfeedback',
            index=models.Index(fields=['user', 'created_at'], name='recommendat_user_id_9i0j1k_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='recommendationfeedback',
            unique_together={('user', 'recommendation')},
        ),
    ]